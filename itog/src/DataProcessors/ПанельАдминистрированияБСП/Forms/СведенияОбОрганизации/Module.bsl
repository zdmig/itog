 #Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти


&НаСервере
Процедура ЗаписатьЗначениеКонстанты(Значение,Константа)
	КонстантаМенеджер = Неопределено;
	Выполнить("КонстантаМенеджер = Константы."+ Константа); 
	Попытка
	КонстантаМенеджер.Установить(Значение);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОрганизацииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 Набор = РеквизитФормыВЗначение("НаборКонстант");
    Набор.Прочитать();
    ЗначениеВРеквизитФормы(Набор,"НаборКонстант"); 
	
	Если НЕ РаботаСУчетнойПолитикойКлиентСервер.ПроверитьРазрешениеУстановкиМетодаСписания() Тогда
		Элементы.МетодСписания.Доступность = Ложь;
	Иначе
		Элементы.МетодСписания.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОсновнаяВалютаПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты(НаборКонстант.ОсновнаяВалюта,"ОсновнаяВалюта");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	УстановитьВидимостьНаКлиенте(ИмяКонстанты);
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции 

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Элементы.ГруппаДополнительныеСведения.Доступность =
			НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
		Элементы.ГруппаСвойстваПравая.Доступность =
			НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ХранитьИсториюИзменений" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		Элементы.НастроитьХранениеИсторииИзменений.Доступность = ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		
		Элементы.НастроитьПолнотекстовыйПоиск.Доступность = ИспользоватьПолнотекстовыйПоиск;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		МодульЭлектроннаяПодписьСлужебный.НастроитьФормуОбщихНастроек(ЭтотОбъект, РеквизитПутьКДанным);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		ДоступностьНастройкиПроксиНаСервере = Не ИспользуютсяПрофилиБезопасности;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаОткрытьПараметрыПроксиСервера",
			"Доступность", ДоступностьНастройкиПроксиНаСервере);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаПроксиСервераНаСервереНедоступнаПриИспользованииПрофилейБезопасности",
			"Видимость", Не ДоступностьНастройкиПроксиНаСервере);
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьШифрование"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS"
		ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		ДоступностьОблачнойПодписи = (НаборКонстант.ИспользоватьЭлектронныеПодписи ИЛИ НаборКонстант.ИспользоватьШифрование)
			И (НаборКонстант.ИспользоватьСервисDSS);
			
		Элементы.ОбработкаУправлениеПодключениемDSSСерверыОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		Элементы.ОбработкаУправлениеПодключениемDSSУчетныеЗаписиОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте(ИмяКонстанты)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Если ИмяКонстанты = "ИспользоватьЭлектронныеПодписи"
			Или ИмяКонстанты = "ИспользоватьШифрование"
			Или ИмяКонстанты = "СоздаватьЭлектронныеПодписиНаСервере"
			Или ИмяКонстанты = "ПроверятьЭлектронныеПодписиНаСервере"
			Или ИмяКонстанты = "" Тогда
				
			МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
			
			Если Не МодульЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере()
				И Не МодульЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере()
				И (МодульЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
					Или МодульЭлектроннаяПодписьКлиент.ИспользоватьШифрование()) Тогда
				
				ПараметрыПроверки = Новый Структура;
				ПараметрыПроверки.Вставить("УстанавливатьРасширение", Ложь);
				ПараметрыПроверки.Вставить("УстанавливатьКомпоненту", Ложь);
				ПараметрыПроверки.Вставить("ПредлагатьУстановитьПрограмму", Ложь);
				
				МодульЭлектроннаяПодписьКлиент.ПроверитьУстановкуПрограммКриптографии(ЭтотОбъект, ПараметрыПроверки,
					Новый ОписаниеОповещения("ПослеПроверкиПрограммКриптографии", ЭтотОбъект));
			Иначе
				//Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ТерминКонстанта = "Константа";
	ЧастиИмени      = СтрРазделить(РеквизитПутьКДанным, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмени.Количество() = 1
			И СтрСравнить(Лев(РеквизитПутьКДанным, СтрДлина(ТерминКонстанта)), ТерминКонстанта) = 0 Тогда
				КонстантаИмя = Сред(РеквизитПутьКДанным, СтрДлина(ТерминКонстанта) + 1);
				КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		//Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетодСписанияПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты(НаборКонстант.МетодСписания,"МетодСписания");
	ЗаписатьИсториюИзмененияМетодаСписанияСервер(НаборКонстант.МетодСписания);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИсториюИзмененияМетодаСписанияСервер(МетодСписания)
	Если РаботаСУчетнойПолитикойКлиентСервер.ПроверитьРазрешениеУстановкиМетодаСписания() Тогда
		РаботаСУчетнойПолитикойКлиентСервер.ЗаписатьИсториюИзмененияМетодаСписания(МетодСписания); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененияНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ИсторияИзмененийМетодаСписания.ФормаСписка",,,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
